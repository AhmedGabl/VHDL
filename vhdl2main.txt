library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;

entity pwm is
	port(clk			: in std_logic;							-- the clock 
		  w			: in std_logic_vector(3 downto 0);	-- the signal that control the PWM 
		  out_pulse : out std_logic);							-- the PWM
end entity;

architecture behaviour of PWM is

	signal out_period : std_logic_vector(3 downto 0);		-- to save the counter value 
	signal out_tmp		: std_logic_vector(3 downto 0);		-- to save the w and valuse less than w
	
	component counter is												-- clock counter
		port(Clock : in std_logic; Q : out std_logic_vector(3 downto 0)); 
	end component;

	begin

	stage0: counter port map(clk,out_period(3 downto 0));	-- gives out_period the clock counter value

	process(clk,out_period)
		begin
		if(clk'event and clk = '1')then -- check rising edge of the clock
		
			if(w = "0000") then 			  -- assign out_tmp with a bit '1' in the four bits if the w "0000" => the special case
				out_tmp <= "1111";        -- note you can change "1111" with any four bits as long it has a bit with '1'
			
			elsif(out_tmp > "0000") then -- if out_temp gratear than w , it decreases the out_temp with '1' , note: it doesnt work first step
				out_tmp <= out_tmp - 1;
				
			elsif(out_period="1111" or out_tmp/="0000") then -- initialise out_tmp at the beginning and end of each cycle
				out_tmp<=w;
				
			end if;
		end if;

		if(out_tmp(3)='1' or out_tmp(2)='1' or out_tmp(1)='1' or out_tmp(0)='1') then -- if there is a single bit from the for
			out_pulse <= '1';																					-- bits in w with '1' it gives a signal '1'
		else out_pulse <='0';																				-- if all '0' it gives a '0'
		end if;

		end process;
end architecture;